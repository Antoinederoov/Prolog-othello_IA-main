% Student exercise profile
:- set_prolog_flag(occurs_check, error).        % disallow cyclic terms
:- set_prolog_stack(global, limit(8 000 000)).  % limit term space (8Mb)
:- set_prolog_stack(local,  limit(2 000 000)).  % limit environment space

% Your program goes here

%Switch player
switchPlayer('b','w').
switchPlayer('w','b').

%Check if its a sandwich or not
check_sandwich(_, []) :- !, fail.
check_sandwich(_, [H|_]) :- var(H), !, fail.
check_sandwich(Player, [H|_]) :- H == Player.
check_sandwich(Player, [H|T]) :- H \== Player, check_sandwich(Player,T).

%Get the disk at a precise index
getDisk(Board, Index, Disk) :- nth0(Index, Board, Disk).

%List all the disk in a precise direction from the index to the last cell of the direction
listDiskInDirection(_,Index,Direction,List,FinalList) :- \+ nextCell(Index,Direction,_), !, FinalList = List.
listDiskInDirection(Board,Index,Direction,List,FinalList) :- nextCell(Index,Direction,NextCellIndex), 
    getDisk(Board, NextCellIndex, Disk), 
    append(List,[Disk],NewList), 
    listDiskInDirection(Board,NextCellIndex,Direction,NewList,FinalList).

%Get the next cell depends on the direction, false if there is no more
nextCell(CellIndex, top, NextCellIndex) :- NextCellIndex is CellIndex-8, NextCellIndex > -1.
nextCell(CellIndex, down, NextCellIndex) :- NextCellIndex is CellIndex+8, NextCellIndex < 64.
nextCell(CellIndex, left, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 0, NextCellIndex is CellIndex-1.
nextCell(CellIndex, right, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 7, NextCellIndex is CellIndex+1.
nextCell(CellIndex, diagNW, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 0, X is CellIndex-9, X > -1, NextCellIndex is CellIndex-9.
nextCell(CellIndex, diagNE, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 7, X is CellIndex-7, X > -1, NextCellIndex is CellIndex-7.
nextCell(CellIndex, diagSE, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 7, X is CellIndex+9, X < 64, NextCellIndex is CellIndex+9.
nextCell(CellIndex, diagSW, NextCellIndex) :- Mod is CellIndex mod 8, Mod =\= 0, X is CellIndex+7, X < 64, NextCellIndex is CellIndex+7.

%Check sandwich which return an empty list if false
isSandwich(Board,Player,Index,Direction) :- switchPlayer(Player,Opponent), %check sandwich par rapport à la couleur opposée
listDiskInDirection(Board,Index,Direction,[],FinalList),
nth0(0, FinalList, Temp), %True when Temp is the first element of List.
nonvar(Temp), Temp == Opponent,
check_sandwich(Player, FinalList).

% Check if there is not a coin on this index of the board
checkIfEmpty(Index, Board) :- getDisk(Board, Index, Disk), Disk \== 'w', Disk \== 'b'.

%Count Number of potential sandwich.
countAllCoinSandwich(Board, StartIndex, Index, Player,  NbCoins, FinalCoins) :- checkIfEmpty(StartIndex, Board),
    countCoinSandwich(Board, Index, top, Player, NbCoins, FinalCoinsTop),
    countCoinSandwich(Board, Index, down, Player, NbCoins, FinalCoinsDown),
    countCoinSandwich(Board, Index, left, Player, NbCoins, FinalCoinsLeft),
    countCoinSandwich(Board, Index, right, Player, NbCoins, FinalCoinsRight),
FinalCoins is (FinalCoinsTop + FinalCoinsDown + FinalCoinsLeft + FinalCoinsRight).

countAllCoinSandwich(Board, StartIndex, Index, Player,  NbCoins, FinalCoins) :- not(checkIfEmpty(StartIndex, Board)),
FinalCoins is 0.
    
%Count Number of potential sandwich. We begin at the potential index and we go up
countCoinSandwich(Board, Index, top, Player,  NbCoins, FinalCoins) :- IndexTampon is Index - 8,
IndexTampon > 0,
getDisk(Board, IndexTampon, Disk),
switchPlayer(Player, Opponent),
Disk == Opponent,
CurrentNbCoins is NbCoins+1,
countCoinSandwich(Board, IndexTampon, top, Player, CurrentNbCoins, FinalCoins).

countCoinSandwich(Board, Index, top, Player, NbCoins, FinalCoins) :- IndexTampon is Index - 8,
IndexTampon < 0,
FinalCoins is 0.

countCoinSandwich(Board, Index, top, Player, NbCoins, FinalCoins) :- IndexTampon is Index-8,
IndexTampon > 0,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

%Count Number of potential sandwich. We begin at the potential index and we go down
countCoinSandwich(Board, Index, down, Player,  NbCoins, FinalCoins) :- IndexTampon is Index + 8,
IndexTampon < 64,
getDisk(Board, IndexTampon, Disk),
switchPlayer(Player, Opponent),
Disk == Opponent,
CurrentNbCoins is NbCoins+1,
countCoinSandwich(Board, IndexTampon, down, Player, CurrentNbCoins, FinalCoins).

countCoinSandwich(Board, Index, down, Player, NbCoins, FinalCoins) :- IndexTampon is Index+8,
IndexTampon > 64,
FinalCoins is 0.

countCoinSandwich(Board, Index, down, Player, NbCoins, FinalCoins) :- IndexTampon is Index+8,
IndexTampon > 0,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

%Count Number of potential sandwich. We begin at the potential index and we go left
countCoinSandwich(Board, Index, left, Player,  NbCoins, FinalCoins) :- IndexTampon is Index - 1,
Mod is IndexTampon mod 8, Mod \== 0,
getDisk(Board, IndexTampon, Disk),
switchPlayer(Player, Opponent),
Disk == Opponent,
CurrentNbCoins is NbCoins+1,
countCoinSandwich(Board, IndexTampon, left, Player, CurrentNbCoins, FinalCoins).

countCoinSandwich(Board, Index, left, Player, NbCoins, FinalCoins) :- IndexTampon is Index - 1,
Mod is IndexTampon mod 8, Mod == 0,
getDisk(Board, IndexTampon, Disk),
Disk \== Player,
FinalCoins is 0.

countCoinSandwich(Board, Index, left, Player, NbCoins, FinalCoins) :- IndexTampon is Index - 1,
Mod is IndexTampon mod 8, Mod == 0,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

countCoinSandwich(Board, Index, left, Player, NbCoins, FinalCoins) :- IndexTampon is Index - 1,
Mod is IndexTampon mod 8, Mod \== 0,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

%Count Number of potential sandwich. We begin at the potential index and we go right
countCoinSandwich(Board, Index, right, Player,  NbCoins, FinalCoins) :- IndexTampon is Index + 1,
Mod is IndexTampon mod 8, Mod \== 7,
getDisk(Board, IndexTampon, Disk),
switchPlayer(Player, Opponent),
Disk == Opponent,
CurrentNbCoins is NbCoins+1,
countCoinSandwich(Board, IndexTampon, right, Player, CurrentNbCoins, FinalCoins).

countCoinSandwich(Board, Index, right, Player, NbCoins, FinalCoins) :- IndexTampon is Index + 1,
Mod is IndexTampon mod 8, Mod == 7,
getDisk(Board, IndexTampon, Disk),
Disk \== Player,
FinalCoins is 0.

countCoinSandwich(Board, Index, right, Player, NbCoins, FinalCoins) :- IndexTampon is Index + 1,
Mod is IndexTampon mod 8, Mod == 7,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

countCoinSandwich(Board, Index, right, Player, NbCoins, FinalCoins) :- IndexTampon is Index + 1,
Mod is IndexTampon mod 8, Mod \== 7,
getDisk(Board, IndexTampon, Disk),
Disk == Player,
FinalCoins is NbCoins.

/** <examples> Your example queries go here, e.g.
?- member(X, [cat, mouse]).
*/
