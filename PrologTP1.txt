% Student exercise profile
:- set_prolog_flag(occurs_check, error).        % disallow cyclic terms
:- set_prolog_stack(global, limit(8 000 000)).  % limit term space (8Mb)
:- set_prolog_stack(local,  limit(2 000 000)).  % limit environment space

% Your program goes here
parent(loic,pierrick).
parent(loic,anouck).
parent(loic,antoine).
parent(corinne,pierrick).
parent(corinne,anouck).
parent(corinne,antoine).
parent(daniel,loic).
parent(jean,daniel).
parent(michel,corinne).
parent(michel,caroline).
parent(caroline,noa).
grand_parent(X,Z) :- parent(X,Y), parent(Y,Z).
ancetre(A,D) :- parent(A,D).
ancetre(A,D) :- parent(A,X), ancetre(X,D).
masculin(loic).
masculin(pierrick).
masculin(antoine).
masculin(daniel).
masculin(jean).
masculin(michel).
masculin(noa).
feminin(anouck).
feminin(corinne).
feminin(caroline).
liste_des_ancetres(Liste,Y) :- bagof(X, ancetre(X,Y), Liste).
liste_des_ancetres2(Liste,Y) :- findall(X, ancetre(X,Y), Liste).
frere(X,Y) :- parent(Z,X), parent(Z,Y), masculin(X), not(X=Y).
soeur(X,Y) :- parent(Z,X), parent(Z,Y), not(X=Y).
cousin_cousine(X,Y) :- parent(P1,X), parent(P2,Y), (frere(P1,P2) ; soeur(P1,P2)).
oncle_ou_tante(O,N) :- parent(P,N), (frere(O,P) ; soeur(O,P)).

/** <examples> Your example queries go here, e.g.
?- member(X, [cat, mouse]).
*/




2. Manipulation de listes
% Student exercise profile
:- set_prolog_flag(occurs_check, error).        % disallow cyclic terms
:- set_prolog_stack(global, limit(8 000 000)).  % limit term space (8Mb)
:- set_prolog_stack(local,  limit(2 000 000)).  % limit environment space

% Your program goes here
membre(X,[X|_]).
membre(X,[_|L]):- membre(X,L).
membre_stop(X,[X|_]).
membre_stop(X,[_|L]):- membre_stop(X,L), !.
concat([], L1, L1).
concat([X|L1],L2,[X|L3]) :- concat(L1,L2,L3).
element(Asoustraire, L, Lreste) :- [Asoustraire|Reste]=L, Lreste=Reste.
element(Asoustraire, L, Lreste) :- [_|L2]=L, [_|L3]=Lreste, element(Asoustraire,L2,L3).
element(Asoustraire, [], []).

/** <examples> Your example queries go here, e.g.
?- member(X, [cat, mouse]).
*/


